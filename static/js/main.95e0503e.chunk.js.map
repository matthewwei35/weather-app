{"version":3,"sources":["components/RadioButton/RadioButton.js","components/WeatherDisplay/WeatherDisplay.js","components/Weather/Weather.js","components/MoodInput/MoodInput.js","App.js","reportWebVitals.js","index.js"],"names":["RadioButton","props","name","label","checked","onChange","type","WeatherDisplay","cod","message","temp","feelsLike","humidity","pressure","wind","description","className","Weather","useState","zip","setZip","unit","setUnit","data","setData","token","process","fetchWeather","path","a","fetch","res","json","main","feels_like","speed","weather","onSubmit","e","preventDefault","placeholder","value","target","onClick","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","err","console","log","enableHighAccuracy","timeout","maximumAge","MoodInput","setMessage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95e0503e.chunk.js","sourcesContent":["function RadioButton(props) {\nconst { name, label, checked, onChange } = props;\n\n  return (\n    <label>\n      <input\n        type=\"radio\"\n        name={name}\n        checked={checked}\n        onChange={onChange}\n      />\n      {label}\n    </label>\n  );\n}\n\nexport default RadioButton;\n","function WeatherDisplay(props) {\n  const { cod, message, temp, name, feelsLike, humidity, pressure, wind, description } = props;\n\n  if (cod !== 200) {\n    return (\n      <small>{message}</small>\n    )\n  }\n\n  return (\n    <div className=\"WeatherDisplay\">\n      <h1>{temp}&#176;</h1>\n      <h2>{name}</h2>\n      <small>Feels Like: <b>{feelsLike}&#176;</b> | Humidity: <b>{humidity}%</b> | Pressure: <b>{pressure} inHg</b> |<br/> Wind: <b>{wind} mph</b></small>\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default WeatherDisplay;\n","import './Weather.scss';\nimport { useState } from 'react';\nimport RadioButton from '../RadioButton/RadioButton';\nimport WeatherDisplay from '../WeatherDisplay/WeatherDisplay';\n\nfunction Weather() {\n  const [zip, setZip] = useState('');\n  const [unit, setUnit] = useState('');\n  const [data, setData] = useState(null);\n  const token = process.env.REACT_APP_OWP_TOKEN;\n\n  function fetchWeatherByGeo() {\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n    navigator.geolocation.getCurrentPosition(pos => {\n      const { latitude, longitude } = pos.coords\n      const path = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${token}&units=${unit}`;\n      fetchWeather(path);\n    }, err => {\n      console.log(err.message);\n    }, options);\n  }\n\n  function fetchWeatherByZip() {\n    const path = `https://api.openweathermap.org/data/2.5/weather?zip=${zip}&appid=${token}&units=${unit}`;\n    fetchWeather(path);\n  }\n\n  async function fetchWeather(path) {\n    const res = await fetch(path);\n    const json = await res.json();\n\n    const cod = json.cod;\n    const message = json.message;\n    if (cod !== 200) {\n      setData({ cod, message })\n      return\n    }\n\n    const temp = json.main.temp;\n    const name = json.name;\n    const feelsLike = json.main.feels_like;\n    const humidity = json.main.humidity;\n    const pressure = json.main.pressure;\n    const wind = json.wind.speed;\n    const description = json.weather[0].description;\n\n    setData({\n      cod,\n      message,\n      temp,\n      name,\n      feelsLike,\n      humidity,\n      pressure,\n      wind,\n      description,\n    })\n  }\n\n  return (\n    <div className=\"Weather\">\n      {data && <WeatherDisplay {...data} />}\n      <form onSubmit={e => {\n        e.preventDefault();\n        fetchWeatherByZip();\n      }}>\n        <div>\n          <input\n            placeholder=\"Enter zip code\"\n            value={zip}\n            onChange={e => setZip(e.target.value)}\n          />\n          <button type=\"submit\">Submit</button>\n        </div>\n\n        <select\n          value={unit}\n          onChange={e => setUnit(e.target.value)}\n        >\n          <option value=\"metric\">Celsius</option>\n          <option value=\"imperial\">Fahrenheit</option>\n          <option value=\"standard\">Kelvin</option>\n        </select>\n\n        <RadioButton\n          label=\"metric\"\n          name=\"unit\"\n          checked={unit === 'metric'}\n          onChange={() => setUnit('metric')}\n        />\n        <RadioButton\n          label=\"imperial\"\n          name=\"unit\"\n          checked={unit === 'imperial'}\n          onChange={() => setUnit('imperial')}\n        />\n        <RadioButton\n          label=\"standard\"\n          name=\"unit\"\n          checked={unit === 'standard'}\n          onChange={() => setUnit('standard')}\n        />\n      </form>\n      <button\n        onClick={() => fetchWeatherByGeo()}\n      >Get weather by location</button>\n    </div>\n  );\n}\n\nexport default Weather;\n","import './MoodInput.scss';\nimport { useState } from 'react';\nimport RadioButton from '../RadioButton/RadioButton';\n\nfunction MoodInput() {\n  const [message, setMessage] = useState('');\n\n  return (\n    <div className=\"MoodInput\">\n      <h2>How are you feeling today?</h2>\n      <p>{message}</p>\n      <form onSubmit={e => {\n        e.preventDefault();\n      }}> \n        <RadioButton\n          label=\"happy\"\n          name=\"mood\"\n          onChange={() => setMessage('Yay, that is wonderful! ðŸ˜Š')}\n        />\n        <RadioButton\n          label=\"calm\"\n          name=\"mood\"\n          onChange={() => setMessage('The weather is calm too. ðŸ˜Œ')}\n        />\n        <RadioButton\n          label=\"sad\"\n          name=\"mood\"\n          onChange={() => setMessage('I hope you feel better. ðŸ¥º')}\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default MoodInput;\n","import './App.scss';\nimport Weather from './components/Weather/Weather';\nimport MoodInput from './components/MoodInput/MoodInput';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n      <MoodInput />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}